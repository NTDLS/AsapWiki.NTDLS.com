<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	System.Text.StringBuilder varList = new System.Text.StringBuilder();
	System.Text.StringBuilder columnList = new System.Text.StringBuilder();
	System.Text.StringBuilder fieldList = new System.Text.StringBuilder();
	
	string connectionString = @"Server=.;integrated security=True;";
	string databaseName = "AsapWiki";
    string watermarkString= "AsapWiki-ADODAL-Procedures";
	string relativeOutputFilePath = null;
	string objectPrefix = "";
	List<string> includeTables = new List<string>{ "MenuItem" };
	
	SqlConnection oneSqlConnection = new SqlConnection(connectionString);
	ServerConnection oneServerConnection = new ServerConnection(oneSqlConnection);
	Server oneServer = new Server(oneServerConnection);
	Database oneDatabase = oneServer.Databases[databaseName];
	foreach (Table oneTable in oneDatabase.Tables)
	{
		if (!oneTable.Name.Equals("sysdiagrams") && oneTable.Columns.Contains("Id") == true && (includeTables.Count == 0 || includeTables.Contains(oneTable.Name)))
		{
#>

--------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('<#=objectPrefix#>GetAll<#= oneTable.Name #>') IS NOT NULL
BEGIN--IF
	DROP PROCEDURE [<#=objectPrefix#>GetAll<#= oneTable.Name #>]
END--IF
GO

CREATE PROCEDURE [<#=objectPrefix#>GetAll<#= oneTable.Name #>] AS
BEGIN--PROCEDURE
	SET NOCOUNT ON;

    /* Generated by <#=watermarkString#> */
	<#
	columnList = new System.Text.StringBuilder();
	
	foreach (Column oneColumn in oneTable.Columns)
	{
		columnList.AppendFormat("\t\t[{0}] as [{1}],\r\n", oneColumn.Name, TemplateHelper.FriendlyVariable(oneColumn.Name));
	}	
	columnList.Length -= 3; //Remove the trailing ",\r\n".
	#>
	
	SELECT
<#= columnList.ToString() #>
	FROM
		[<#=oneTable.Name#>]

END--PROCEDURE
GO

--------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('<#=objectPrefix#>Delete<#= oneTable.Name #>ById') IS NOT NULL
BEGIN--IF
	DROP PROCEDURE [<#=objectPrefix#>Delete<#= oneTable.Name #>ById]
END--IF
GO

CREATE PROCEDURE [<#=objectPrefix#>Delete<#= oneTable.Name #>ById]
(
	@Id Int
) AS
BEGIN--PROCEDURE
	SET NOCOUNT ON;

    /* Generated by <#=watermarkString#> */
	
	DELETE FROM
		[<#=oneTable.Name#>]
	WHERE
		Id = @Id

END--PROCEDURE
GO


--------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('<#=objectPrefix#>Get<#= oneTable.Name #>ById') IS NOT NULL
BEGIN--IF
	DROP PROCEDURE [<#=objectPrefix#>Get<#= oneTable.Name #>ById]
END--IF
GO

CREATE PROCEDURE [<#=objectPrefix#>Get<#= oneTable.Name #>ById]
(
	@Id Int
) AS
BEGIN--PROCEDURE
	SET NOCOUNT ON;

    /* Generated by <#=watermarkString#> */
	<#
	columnList = new System.Text.StringBuilder();
	
	foreach (Column oneColumn in oneTable.Columns)
	{
		columnList.AppendFormat("\t\t[{0}] as [{1}],\r\n", oneColumn.Name, TemplateHelper.FriendlyVariable(oneColumn.Name));
	}	
	columnList.Length -= 3; //Remove the trailing ",\r\n".
	#>
	
	SELECT
<#= columnList.ToString() #>
	FROM
		[<#=oneTable.Name#>]
	WHERE
		Id = @Id

END--PROCEDURE
GO

--------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('<#=objectPrefix#>Update<#= oneTable.Name #>ById') IS NOT NULL
BEGIN--IF
	DROP PROCEDURE [<#=objectPrefix#>Update<#= oneTable.Name #>ById]
END--IF
GO

<#
	varList = new System.Text.StringBuilder();
	columnList = new System.Text.StringBuilder();
	foreach (Column oneColumn in oneTable.Columns)
	{
		if(oneColumn.Computed == false
			&& oneColumn.DataType.ToString().ToLower() != "timestamp")
		{
            varList.AppendFormat("\t@{0} as {1}{2},\r\n",
                TemplateHelper.FriendlyVariable(oneColumn.Name),
                TemplateHelper.FriendlySqlType(oneColumn.DataType),
                (oneColumn.Nullable == true ? " = NULL" : ""));
		}

		if(oneColumn.Computed == false
			&& oneColumn.Name.ToLower() != "id"
			&& oneColumn.DataType.ToString().ToLower() != "timestamp")
		{
			columnList.AppendFormat("\t\t[{0}] = @{1},\r\n", oneColumn.Name, TemplateHelper.FriendlyVariable(oneColumn.Name));
		}
	}	
	varList.Length -= 3; //Remove the trailing ",\r\n".
	columnList.Length -= 3; //Remove the trailing ",\r\n".
#>

CREATE PROCEDURE [<#=objectPrefix#>Update<#= oneTable.Name #>ById]
(
<#= varList.ToString() #>
) AS
BEGIN--PROCEDURE
	SET NOCOUNT ON;

    /* Generated by <#=watermarkString#> */
	
	UPDATE
		[<#=oneTable.Name#>]
	SET
<#= columnList.ToString() #>
	FROM
		[<#=oneTable.Name#>]
	WHERE
		Id = @Id

END--PROCEDURE
GO

--------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('<#=objectPrefix#>Insert<#= oneTable.Name #>') IS NOT NULL
BEGIN--IF
	DROP PROCEDURE [<#=objectPrefix#>Insert<#= oneTable.Name #>]
END--IF
GO

<#
	columnList = new System.Text.StringBuilder();
	varList = new System.Text.StringBuilder();
	fieldList = new System.Text.StringBuilder();

	foreach (Column oneColumn in oneTable.Columns)
	{
		if(
			oneColumn.Computed == false
			&& oneColumn.Identity == false
			&& oneColumn.DataType.ToString().ToLower() != "timestamp")
		{
            varList.AppendFormat("\t@{0} as {1}{2},\r\n",
                TemplateHelper.FriendlyVariable(oneColumn.Name),
                TemplateHelper.FriendlySqlType(oneColumn.DataType),
                (oneColumn.Nullable == true ? " = NULL" : ""));

			columnList.AppendFormat("\t\t[{0}],\r\n", oneColumn.Name);
			fieldList.AppendFormat("\t\t@{0},\r\n", TemplateHelper.FriendlyVariable(oneColumn.Name));
		}
	}	
	columnList.Length -= 3; //Remove the trailing ",\r\n".
	varList.Length -= 3; //Remove the trailing ",\r\n".
	fieldList.Length -= 3; //Remove the trailing ",\r\n".
#>

CREATE PROCEDURE [<#=objectPrefix#>Insert<#= oneTable.Name #>]
(
<#= varList.ToString() #>
) AS
BEGIN--PROCEDURE
	SET NOCOUNT ON;
	
    /* Generated by <#=watermarkString#> */

	INSERT INTO [<#=oneTable.Name#>]
	(
<#= columnList.ToString() #>
	)
	VALUES
	(
<#=fieldList.ToString() #>
	)

    SELECT cast(SCOPE_IDENTITY() as int) as [NewId]

END--PROCEDURE
GO

<#
		}
	}	

relativeOutputFilePath = @"\Procedures\" + objectPrefix + "Repository.sql";
TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
GenerationEnvironment = new System.Text.StringBuilder();
#>
	
<#+
	public class TemplateHelper
{
	public static void WriteTemplateOutputToFile(
		string relativeOutputFilePath,
		Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host,
		System.Text.StringBuilder GenerationEnvironment)
	{
		string outputPath = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = outputPath + relativeOutputFilePath;
		System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString().TrimStart());
	}
	
	public static string SplitCamelCase(string str)
	{
		return Regex.Replace( Regex.Replace( str, @"(\P{Ll})(\P{Ll}\p{Ll})", "$1 $2" ), @"(\p{Ll})(\P{Ll})", "$1 $2" );
	}
	
    public static string FriendlySqlType(Microsoft.SqlServer.Management.Smo.DataType dateType)
    {
        switch(dateType.Name.ToLower())
        {
            //Requires: Scale and precision
            case "decimal":
            case "numeric":
                return dateType.Name + " (" + dateType.NumericPrecision + ", " + dateType.NumericScale + ")";
                break;

            //Requires: Width
            case "binary":
            case "nvarchar":
            case "nchar":
            case "varbinary":
            case "varchar":
            case "char":
                return dateType.Name + " (" + (dateType.MaximumLength > 0 ? dateType.MaximumLength.ToString() : "MAX") + ")";
                break;

            case "varcharmax":
                return "varchar (" + dateType.MaximumLength + ")";
                break;
            case "nvarcharmax":
                return "nvarchar (" + dateType.MaximumLength + ")";
                break;
            case "varbinarymax":
                return "varbinary (" + dateType.MaximumLength + ")";
                break;
            case "nvarbinarymax":
                return "nvarbinary (" + dateType.MaximumLength + ")";
                break;

            default:
                //Requires: No Scale or precision / Width
                return dateType.Name;
                break;
        }
    }

	public static string GetDotNetType(Microsoft.SqlServer.Management.Smo.DataType dataType, bool Nullable)
	{
		string typeName = string.Empty;
		
		switch(dataType.ToString().ToLower().Trim())
		{
			case "datetime":
			case "date":
			case "datetime2":
				typeName = "DateTime";
				break;
			case "tinyint":
				typeName = "byte";
				break;
			case "int":
				typeName = "int";
				break;
			case "smallint":
				typeName = "short";
				break;
			case "bigint":			
				typeName = "long";
				break;
			case "numeric":
			case "decimal":
				typeName = "decimal";
				break;
			case "bit":
				typeName = "bool";
				break;
			case "uniqueidentifier":
				typeName = "Guid";
				break;
			case "varbinary":
			case "timestamp":
				typeName = "byte[]";
				break;
			case "char":
			case "varchar":
			case "nvarchar":
				typeName = "string";
				break;
			default:
				typeName = dataType.ToString();
				break;
		}
		
		if(Nullable && typeName != "string" && typeName != "byte[]")
		{
			typeName += "?";	
		}
		
		return typeName;
	}
	
	public static string GetLowerCasedName(string fieldName)
	{
		return Char.ToLowerInvariant(fieldName[0]) + fieldName.Substring(1);
	}

	public static string FriendlyVariable(string fieldName)
	{
		bool match = false;
		char dirtyChar;
		char[] validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789".ToCharArray();
		string newFieldName = string.Empty;

		foreach (char fieldChar in fieldName)
		{
			dirtyChar = char.ToUpper(fieldChar);
			match = false;

			foreach(char validChar in validChars)
			{
				if (dirtyChar == validChar)
				{
					match = true;
					break;
				}
			}

			if (match)
			{
				newFieldName += fieldChar;
			}
			else
			{
				newFieldName += '_';
			}
				
		}

		/*
		int length;
		do
		{
			length = newFieldName.Length;
			newFieldName = newFieldName.Replace("__", "_");
		} while (length != newFieldName.Length);

		if (newFieldName.LastIndexOf('_') == newFieldName.Length - 1)
		{
			newFieldName = newFieldName.Substring(0, newFieldName.Length - 1);
		}
		*/

		return newFieldName;
	}

	public static string GetDataMemberCode(int currentFieldCount)
	{
		char[] alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray(); 	
		
		int charIndex = currentFieldCount;
		int multiplier = 1;
		
		if(currentFieldCount != 0)
		{
			multiplier = (currentFieldCount / 26) + 1;		
		}
		
		if(currentFieldCount > 25)
		{
			charIndex = currentFieldCount % 26;	
		}
		
		System.Text.StringBuilder sb = new System.Text.StringBuilder();
		for(int i = 0; i < multiplier; i++)
		{			
			
			sb.Append(alpha[charIndex]);
		}
		
		return sb.ToString();
	}
}
#>