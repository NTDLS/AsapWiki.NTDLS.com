<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

<#
	string connectionString = @"Server=.;integrated security=true";
	string databaseName = "SharpWiki";
	string strNamespace = "SharpWiki.Shared.Repository";
	string adoConnectionString = "Singletons.MetaConnectionString.ToString()";
	string objectPrefix = "";
	string outputPath = "./../SharpWiki.Shared/Repository/";
	List<string> includeTables = new List<string> {  };

	string relativeOutputFilePath = null;
	System.Text.StringBuilder paramList = new System.Text.StringBuilder();
	SqlConnection oneSqlConnection = new SqlConnection(connectionString);
	ServerConnection oneServerConnection = new ServerConnection(oneSqlConnection);
	Server oneServer = new Server(oneServerConnection);
	Database oneDatabase = oneServer.Databases[databaseName];
	foreach (Table oneTable in oneDatabase.Tables)
	{
		if (!oneTable.Name.Equals("sysdiagrams") && oneTable.Columns.Contains("Id") == true && (includeTables.Count == 0 || includeTables.Contains(oneTable.Name)))
		{
#>
using SharpWiki.Shared.ADO;
using SharpWiki.Shared.Models;
using Dapper;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace <#= strNamespace #>
{
	public static partial class <#= oneTable.Name #>Repository
	{        
		public static List<<#= oneTable.Name #>> GetAll<#= oneTable.Name #>()
		{
            using (var handler = new SqlConnectionHandler())
            {
                return handler.Connection.Query<<#= oneTable.Name #>>("<#=objectPrefix#>GetAll<#= oneTable.Name #>",
                    null, null, true, Singletons.CommandTimeout, CommandType.StoredProcedure).ToList();
            }
		}

		public static <#= oneTable.Name #> Get<#= oneTable.Name #>ById(int id)
		{
            using (var handler = new SqlConnectionHandler())
            {
                return handler.Connection.Query<<#= oneTable.Name #>>("<#=objectPrefix#>Get<#= oneTable.Name #>ById",
                    new { Id = id }, null, true, Singletons.CommandTimeout, CommandType.StoredProcedure).FirstOrDefault();
            }
		}
<#
		paramList = new System.Text.StringBuilder();	
		foreach (Column oneColumn in oneTable.Columns)
		{
			if(
				oneColumn.Computed == false
				&& oneColumn.DataType.ToString().ToLower() != "timestamp"
				&& oneColumn.Name.ToLower() != "AuditRecordIdentifier".ToLower() && oneColumn.Name.ToLower() != "AuditRecordBatch".ToLower())
			{
				paramList.AppendFormat("\t\t\t\t\t{0} = item.{0},\r\n", TemplateHelper.FriendlyVariable(oneColumn.Name));
			}
		}	
		paramList.Length -= 3; //Remove the trailing ",\r\n".	
#>
		public static void Update<#= oneTable.Name #>ById(<#= oneTable.Name #> item)
		{
            using (var handler = new SqlConnectionHandler())
            {
				var param = new
				{
<#=paramList#>
				};

                handler.Connection.Execute("<#=objectPrefix#>Update<#= oneTable.Name #>ById",
                    param, null, Singletons.CommandTimeout, CommandType.StoredProcedure);
            }
		}		
<#
		paramList = new System.Text.StringBuilder();	
		foreach (Column oneColumn in oneTable.Columns)
		{
			if(oneColumn.Identity == false)
			{
				if(
					oneColumn.Computed == false
					&& oneColumn.Identity == false
					&& oneColumn.DataType.ToString().ToLower() != "timestamp"
					&& oneColumn.Name.ToLower() != "AuditRecordIdentifier".ToLower() && oneColumn.Name.ToLower() != "AuditRecordBatch".ToLower())
				{
					paramList.AppendFormat("\t\t\t\t\t{0} = item.{0},\r\n", TemplateHelper.FriendlyVariable(oneColumn.Name));
				}
			}
		}	
		paramList.Length -= 3; //Remove the trailing ",\r\n".	
#>
		public static int Insert<#= oneTable.Name #>(<#= oneTable.Name #> item)
		{
            using (var handler = new SqlConnectionHandler())
            {
				var param = new
				{
<#=paramList#>
				};

                return handler.Connection.ExecuteScalar<int>("<#=objectPrefix#>Insert<#= oneTable.Name #>",
                    param, null, Singletons.CommandTimeout, CommandType.StoredProcedure);
            }
		}
		
		public static void Delete<#= oneTable.Name #>ById(int id)
		{
            using (var handler = new SqlConnectionHandler())
            {
                handler.Connection.Execute("<#=objectPrefix#>Delete<#= oneTable.Name #>ById",
                    new { Id = id }, null, Singletons.CommandTimeout, CommandType.StoredProcedure);
            }						
		}
	}
}

<#
			relativeOutputFilePath = outputPath + oneTable.Name + "Repository.cs";
			TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			GenerationEnvironment = new System.Text.StringBuilder();
		}
	}	
#>
	
<#+
	public class TemplateHelper
{
	public static void WriteTemplateOutputToFile(
		string relativeOutputFilePath,
		Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host,
		System.Text.StringBuilder GenerationEnvironment)
	{
		string outputPath = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = outputPath + relativeOutputFilePath;
		System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString().TrimStart());
	}
	
	public static string SplitCamelCase(string str)
	{
		return Regex.Replace( Regex.Replace( str, @"(\P{Ll})(\P{Ll}\p{Ll})", "$1 $2" ), @"(\p{Ll})(\P{Ll})", "$1 $2" );
	}
	
	public static string GetDotNetType(Microsoft.SqlServer.Management.Smo.DataType dataType, bool Nullable)
	{
		string typeName = string.Empty;
		
		switch(dataType.ToString().ToLower().Trim())
		{
			case "datetime":
			case "date":
			case "datetime2":
				typeName = "DateTime";
				break;
			case "tinyint":
				typeName = "byte";
				break;
			case "int":
				typeName = "int";
				break;
			case "smallint":
				typeName = "short";
				break;
			case "bigint":			
				typeName = "long";
				break;
			case "numeric":
			case "decimal":
				typeName = "decimal";
				break;
			case "bit":
				typeName = "bool";
				break;
			case "uniqueidentifier":
				typeName = "Guid";
				break;
			case "varbinary":
			case "timestamp":
				typeName = "byte[]";
				break;
			case "char":
			case "varchar":
			case "nvarchar":
				typeName = "string";
				break;
			default:
				typeName = dataType.ToString();
				break;
		}
		
		if(Nullable && typeName != "string" && typeName != "byte[]")
		{
			typeName += "?";	
		}
		
		return typeName;
	}

	public static string GetDataReaderMethod(Microsoft.SqlServer.Management.Smo.DataType dataType, bool Nullable)
	{
		string methodName = string.Empty;
		string nullableString = Nullable == true ? "Nullable" : string.Empty;
		
		switch(dataType.ToString().ToLower().Trim())
		{
			case "datetime":
			case "date":
			case "datetime2":
				methodName = "Get" + nullableString + "DateTime";
				break;
			case "tinyint":
				methodName = "Get" + nullableString + "Byte";
				break;
			case "int":
				methodName = "Get" + nullableString + "Int32";
				break;
			case "smallint":
				methodName = "Get" + nullableString + "Int16";
				break;
			case "bigint":			
				methodName = "Get" + nullableString + "Int64";
				break;
			case "numeric":
			case "decimal":
				methodName = "Get" + nullableString + "Decimal";
				break;
			case "bit":
				methodName = "Get" + nullableString + "Boolean";
				break;
			case "uniqueidentifier":
				methodName = "Get" + nullableString + "Guid";
				break;
			case "varbinary":
			case "timestamp":
				methodName = "Get" + nullableString + "ByteArray";
				break;
			case "char":
			case "varchar":
			case "nvarchar":
				methodName = "Get" + nullableString + "String";
				break;
			default:
				methodName = dataType.ToString();
				break;
		}
		
		return methodName;
	}

	
	public static string GetLowerCasedName(string fieldName)
	{
		return Char.ToLowerInvariant(fieldName[0]) + fieldName.Substring(1);
	}

	public static string FriendlyVariable(string fieldName)
	{
		bool match = false;
		char dirtyChar;
		char[] validChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789".ToCharArray();
		string newFieldName = string.Empty;

		foreach (char fieldChar in fieldName)
		{
			dirtyChar = char.ToUpper(fieldChar);
			match = false;

			foreach(char validChar in validChars)
			{
				if (dirtyChar == validChar)
				{
					match = true;
					break;
				}
			}

			if (match)
			{
				newFieldName += fieldChar;
			}
			else
			{
				newFieldName += '_';
			}
				
		}

		/*
		int length;
		do
		{
			length = newFieldName.Length;
			newFieldName = newFieldName.Replace("__", "_");
		} while (length != newFieldName.Length);

		if (newFieldName.LastIndexOf('_') == newFieldName.Length - 1)
		{
			newFieldName = newFieldName.Substring(0, newFieldName.Length - 1);
		}
		*/

		return newFieldName;
	}

	public static string GetDataMemberCode(int currentFieldCount)
	{
		char[] alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray(); 	
		
		int charIndex = currentFieldCount;
		int multiplier = 1;
		
		if(currentFieldCount != 0)
		{
			multiplier = (currentFieldCount / 26) + 1;		
		}
		
		if(currentFieldCount > 25)
		{
			charIndex = currentFieldCount % 26;	
		}
		
		System.Text.StringBuilder sb = new System.Text.StringBuilder();
		for(int i = 0; i < multiplier; i++)
		{			
			
			sb.Append(alpha[charIndex]);
		}
		
		return sb.ToString();
	}
}
#>