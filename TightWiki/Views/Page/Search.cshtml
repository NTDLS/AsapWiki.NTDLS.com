@model TightWiki.Models.ViewModels.Page.PageSearchViewModel
@{
    Layout = "/Views/Shared/_Layout.cshtml";
    var sessionState = ViewData["SessionState"] as TightWiki.SessionState ?? throw new Exception("Wiki State Context cannot be null.");
}

<h3>
    Page Search
</h3>

<p>
    If it's here, you should be able to find it.<br /><br />
</p>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Html.Raw(Model.ErrorMessage)</div>
}
@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success">@Html.Raw(Model.SuccessMessage)</div>
}

@using (Html.BeginForm(FormMethod.Get))
{
    <div class="container">
        <div class="d-flex justify-content-end mb-4">
            <div class="flex-grow-1 me-2">
                @Html.TextBoxFor(x => x.SearchString, new { @class = "form-control", style = "width:100%" })
            </div>
            <button type="submit" value="Find" class="btn btn-primary">Search</button>
        </div>
    </div>
    <br />

    <table class="table fixedTable100 table-striped" border="0" cellspacing="0" cellpadding="0">
        @foreach (var p in Model.Pages)
        {
            <tr>
                <td>
                    @if ((p.Namespace ?? "") != "")
                    {
                        <font class="text-muted">@p.Namespace ::</font>
                    }<a href="/@p.Navigation">@p.Title</a>@(String.IsNullOrEmpty(@p.Description) ? "" : " : ")  @p.Description
                </td>
            </tr>
        }
    </table>

    @Html.Raw(TightWiki.Library.PageSelectorGenerator.Generate(Context.Request.QueryString, Model.PaginationPageCount))
}

<script>
    window.onload = function () {
        document.getElementById("SearchTokens").focus();
    }
</script>